<!-- Author(s): See <authorgroup> in book-elfabi.sgml -->
<!-- Copyright (c) 2011, Power.org -->
<!-- Permission is granted to copy, distribute and/or modify this document
     under the terms of the GNU Free Documentation License, Version 1.3; with
     no Invariant Sections, with no Front-Cover Texts, and with no Back-Cover 
     Texts. A copy of the license is available in the COPYING.txt file. -->

<chapter id="LIB">
	<title>Libraries</title>
	<sect1 id="Library-Requirements">
		<title>Library Requirements</title>
		<para>This ABI doesn't specify any additional interfaces for general-purpose libraries.  However, certain processor specific support routines are defined in order to ensure portability between ABI conforming implementations.</para>
		<para>Such processor specific support definitions concern floating-point alignment, register save/restore routines, variable argument list layout and a limited set of data definitions.</para>
		<sect2 id="C-Library-Conformance-With-Generic-ABI">
			<title>C Library Conformance with Generic ABI</title>

<!--			<para>The <varname>malloc()</varname> routine must always return a pointer with the alignment of the largest supported data type.:</para> 
			<itemizedlist>
				<listitem CONDITION="ATR-LONG-DOUBLE-IBM"><para>At least 16-byte (quadword)
				aligned, as the required pointer may be used for storing
				IBM <trademark class="REGISTERED">AIX</trademark> 128-bit Long Double
				data items that require 16-byte alignment.</para>
				</listitem>
				<listitem CONDITION="ATR-DFP"><para>At least 16-byte (quadword)
				aligned, as the required pointer may be used for storing _Decimal128
				data items that require 16-byte alignment.</para>
				</listitem>
				<listitem CONDITION="ATR-CLASSIC-FLOAT || ATR-SPE">
				<para>At least 8-byte (doubleword) aligned, as the returned pointer
				may be used for storing data items that require 8-byte alignment.</para>
				</listitem>
			</itemizedlist>
			-->
			<sect3 id="MALLOC-RETURN-ALIGNMENT">
				<title>Malloc Routine Return Pointer Alignment</title>
				<para>The <varname>malloc()</varname> routine must always return a pointer with the alignment of the largest supported data type from the following list:</para> 
				<itemizedlist>
					<listitem CONDITION="ATR-LONG-DOUBLE-IBM"><para>At least 16-byte (quadword)
					aligned, as the required pointer may be used for storing
					IBM AIX 128-bit Long Double
					data items that require 16-byte alignment.</para>
					</listitem>
					<listitem CONDITION="ATR-DFP"><para>At least 16-byte (quadword)
					aligned, as the required pointer may be used for storing _Decimal128
					data items that require 16-byte alignment.</para>
					</listitem>
					<listitem CONDITION="!ATR-LONG-DOUBLE-IBM && !ATR-DFP">
					<para>At least 8-byte (doubleword) aligned, as the returned pointer
					may be used for storing data items that require 8-byte alignment.</para>
					</listitem>
				</itemizedlist>
			</sect3>
			<sect3 id="LIMITED-ACCESS-BITS-LIBRARIES">
				<title>Library Handling of Limited-access Bits in Registers</title>

				<para>Requirements for the handling of limited-access bits in certain registers by standard
				library functions are defined in <emphasis><xref linkend="LIMITED-ACCESS"></emphasis>.</para>
			</sect3>
		</sect2>

		<sect2 id="SAVE-AND-RESTORE-ROUTINES">

			<title>Save and Restore Routines</title>

			<para>All of the save and restore routines described in
			<emphasis><xref linkend="SAVE-RES"></emphasis> are required.  These routines
			use unusual calling conventions due to their special
			purpose.</para>

			<sect3 id="SUFFIXES"><title>Save and Restore Routine Suffixes</title>

			<para>The following suffix extensions describe the
			function templates in <emphasis><xref linkend="SaRRT"></emphasis>.</para>

			<variablelist>
				<varlistentry><term><emphasis><emphasis role="bold">_m</emphasis></emphasis> (<emphasis>save and restore function variable</emphasis>)</term>
					<listitem>
						<para>The variable <emphasis>_m</emphasis> represents the first register to be
						saved.  That is, to save
						registers 18 to 31 using 32-bit
						saves, one would call
						save32gpr_18.</para>
					</listitem>
				</varlistentry>
				<varlistentry CONDITION="ATR-BSS-PLT"><term><emphasis role="bold">_g</emphasis> (<emphasis>save function qualifier</emphasis>)</term>
					<listitem>
						<para><emphasis role="bold">GOT save functions</emphasis> are represented by the _g qualifier.  These functions return to the caller of the save function by branching to the blrl instruction held at _GLOBAL_OFFSET_TABLE_-4.</para>
					</listitem>
				</varlistentry>
				<varlistentry CONDITION="ATR-SECURE-PLT"><term><emphasis role="bold">_g</emphasis> (<emphasis>save function qualifier</emphasis>)</term>
					<listitem>
						<para><emphasis role="bold">GOT save functions</emphasis> use the _g qualifier.  These functions are illegal to use with the <emphasis>Secure-PLT</emphasis> ABI since the Secure-PLT is not executable.</para>
					</listitem>
				</varlistentry>
				<varlistentry><term><emphasis role="bold">_x</emphasis> (<emphasis>restore function qualifier</emphasis>)</term>
					<listitem>
						<para><emphasis role="bold">Exit restore functions</emphasis> are represented by the _x qualifier.  These functions restore the specified registers and use the link-register value in the calling function's LR-save area to return to the caller's parent function after removing the caller's stack frame.</para>
					</listitem>
				</varlistentry>
				<varlistentry><term><emphasis role="bold">_t</emphasis> (<emphasis>restore function qualifier</emphasis>)</term>
					<listitem>
						<para><emphasis role="bold">Tail restore functions</emphasis> are represented by the _t qualifier.  Given the following function call sequence where <emphasis>function3</emphasis> is a tail-call:</para>

						<para>
						<screen>
function1()
{
        function2();
        &lt;further calls and code&gt;
        return;
}

function2()
{
        _rest*_t();
        return function3();
}

</screen></para>

						<para>The <emphasis role="bold">tail restore functions</emphasis> are called from <emphasis>function2</emphasis> and prepare the register state in <emphasis>function2</emphasis> for a tail-call to <emphasis>function3</emphasis> that is to return directly to <emphasis>function1</emphasis>.  They restore the specified registers for <emphasis>function1</emphasis> from <emphasis>function1's</emphasis> stack frame and save the address of <emphasis>function1</emphasis> from the LRSAVE word of <emphasis>function1</emphasis>'s stack frame into R0 before returning control to <emphasis>function2</emphasis>.  <emphasis>Function2</emphasis> then sets the LR to the address of <emphasis>function1</emphasis> held in R0 and calls the tail function <emphasis>function3</emphasis>.  <emphasis>Function3</emphasis> will perform it's duty and then return directly to <emphasis>function1</emphasis> rather than <emphasis>function2</emphasis>.</para>
					</listitem>
				</varlistentry>
				<varlistentry CONDITION="ATR-EABI || ATR_SPE"><term><emphasis role="bold">_ctr</emphasis> (<emphasis>save & restore function qualifier</emphasis>)</term>
					<listitem>
						<para><emphasis role="bold">CTR register save and restore functions</emphasis> are represented by the <emphasis>_ctr</emphasis> qualifier.  These functions set the number of registers to be &ldquo;saved to&rdquo; or &ldquo;restored from&rdquo; into the CTR register.</para>
					</listitem>
				</varlistentry>
			</variablelist>
	
			</sect3>
			<sect3 id="SaRRT"><title>Save and Restore Routine Templates</title>
			<itemizedlist>
				<listitem><para>_savegpr_m</para></listitem>
				<listitem CONDITION="!ATR-SECURE-PLT"><para>_savegpr_m_g</para></listitem>
				<listitem CONDITION="ATR-CLASSIC-FLOAT"><para>_savefpr_m</para></listitem>
				<listitem CONDITION="ATR-CLASSIC-FLOAT && !ATR-SECURE-PLT"><para>_savefpr_m_g</para></listitem>
				<listitem CONDITION="ATR-VECTOR"><para>_savevr_m</para></listitem>
				<listitem CONDITION="ATR-CLASSIC-FLOAT"><para>_restfpr_m</para></listitem>
				<listitem CONDITION="ATR-CLASSIC-FLOAT"><para>_restfpr_m_x</para></listitem>
				<listitem CONDITION="ATR-CLASSIC-FLOAT"><para>_restfpr_m_t</para></listitem>
				<listitem CONDITION="ATR-VECTOR"><para>_restvr_m</para></listitem>
				<listitem><para>_restgpr_m</para></listitem>
				<listitem><para>_restgpr_m_x</para></listitem>
				<listitem><para>_restgpr_m_t</para></listitem>
				<listitem CONDITION="ATR-SPE"><para>_save32gpr_m</para></listitem>
				<listitem CONDITION="ATR-SPE"><para>_save64gpr_m</para></listitem>
				<listitem CONDITION="ATR-SPE && ATR-EABI"><para>_save64gpr_ctr_m</para></listitem>
				<listitem CONDITION="ATR-SPE && !ATR-SECURE-PLT"><para>_save32gpr_m_g</para></listitem>
				<listitem CONDITION="ATR-SPE && !ATR-SECURE-PLT"><para>_save64gpr_m_g</para></listitem>
				<listitem CONDITION="ATR-SPE && !ATR-SECURE-PLT && ATR-EABI"><para>_save64gpr_ctr_m_g</para></listitem>
				<listitem CONDITION="ATR-SPE"><para>_rest32gpr_m</para></listitem>
				<listitem CONDITION="ATR-SPE"><para>_rest64gpr_m</para></listitem>
				<listitem CONDITION="ATR-SPE && ATR-EABI"><para>_rest64gpr_ctr_m</para></listitem>
				<listitem CONDITION="ATR-SPE"><para>_rest32gpr_m_x</para></listitem>
				<listitem CONDITION="ATR-SPE"><para>_rest64gpr_m_x</para></listitem>
				<listitem CONDITION="ATR-SPE"><para>_rest32gpr_m_t</para></listitem>
				<listitem CONDITION="ATR-SPE"><para>_rest64gpr_m_t</para></listitem>
			</itemizedlist>
			</sect3>
		</sect2>

		<sect2 id="STANDARD-TYPES">
			<title>Types Defined In Standard Header</title>

			<para>The type va_list shall be defined as follows:</para>
			<programlisting>
typedef struct __va_list_tag {
  unsigned char gpr;
  unsigned char fpr;
  /* Two bytes padding.  */
  char *overflow_arg_area;
  char *reg_save_area;
} va_list[1];</programlisting>

			<para>The names and types of the elements are not part
			of the ABI, but the <varname>__va_list_tag</varname> name is part of the
			ABI (since it affects C++ name mangling), and the
			structure must have the size, alignment and layout
			implied by this definition.</para>

			<itemizedlist>
				<listitem>

					<para>The <emphasis role="bold">gpr</emphasis> element holds the index of the
					next general-purpose register saved in this area from which an argument would be
					retrieved with <varname>va_arg()</varname>, where <emphasis>gpr</emphasis> == N corresponds to
					r<emphasis>N</emphasis> &plus; 3.  (If the argument is passed as DUAL_GP and <emphasis>gpr</emphasis>
					is odd, the next argument would be retrieved from r<emphasis>N</emphasis> &plus;
					4 and r<emphasis>N</emphasis> & plus; 5 instead.) If <emphasis>gpr</emphasis> is greater than 7, no
					more arguments will be retrieved from general-purpose registers by
					<varname>va_arg()</varname>.</para>

				</listitem>

				<listitem CONDITION="ATR-CLASSIC-FLOAT">

					<para>The <emphasis role="bold">fpr</emphasis> element holds the index of the
					next floating-point register saved in this area from which an argument would be
					retrieved with <varname>va_arg()</varname>.

					<itemizedlist>

						<listitem><para>Fpr == <emphasis>N</emphasis> corresponds to
						f<emphasis>N</emphasis> &plus; 1.  If fpr is greater than 7, no more arguments
						will be retrieved from floating-point registers by
						<varname>va_arg()</varname>.  </para></listitem>

						<listitem CONDITION="ATR-DFP"><para>If the argument being passed is
						_Decimal128 and fpr &equals;&equals; <emphasis>N</emphasis> where
						<emphasis>N</emphasis> is even then f<emphasis>N</emphasis> &plus; 2 and
						f<emphasis>N</emphasis> &plus; 3 are referred to instead.  If fpr is
						greater than 6, no more arguments will be retrieved from floating-point
						registers by <varname>va_arg()</varname>.</para></listitem>

					</itemizedlist>
				</para></listitem>


				<listitem>

					<para><emphasis role="bold">reg_save_area</emphasis> points to an 8-byte-aligned
					area where registers r3 to r10 are saved, in that order.</para>

					<para>Addresses in the area pointed to by <emphasis
					role="bold">reg_save_area</emphasis> that correspond to registers used for
					passing named arguments, or to unused registers between those used for passing
					named arguments, need not correspond to allocated memory; those registers need
					not be saved in this area.  va_arg shall only access those words required to
					load the argument of the type passed.</para>

					<para CONDITION="ATR-SPE">Only the low 32 bits of each register are saved in
					this area.</para>

					<para CONDITION="ATR-CLASSIC-FLOAT">Registers f1 to f8 immediately follow
					registers r3 to r10, if CR bit 6 was set when the variable-argument function was
					called.</para> </listitem>

				<listitem>

					<para>The <emphasis role="bold">overflow_arg_area</emphasis> element points to
					the word on the stack at the start of the next argument passed on the stack, or
					to a prior word that forms part of the padding required for the next argument to
					have the required alignment.  va_arg shall only access those words required to
					load the argument of the type passed; if no arguments were passed on the stack,
					this area may not be allocated.</para>

				</listitem>
			</itemizedlist>

			<para>The following integer types are defined in headers required to be provided by freestanding
			implementations, or have their limits defined in such headers, and shall have the following
			definitions.</para>

			<note CONDITION="ATR-EABI"><title>Note</title><para>Note: Freestanding implementations need not
			provide the types sig_atomic_t and wint_t.</para></note>

			<itemizedlist>
				<listitem><para>typedef int ptrdiff_t;</para></listitem>
				<listitem><para>typedef unsigned int size_t;</para></listitem>
				<listitem><para>typedef long wchar_t;</para></listitem>
				<listitem><para>typedef int sig_atomic_t;</para></listitem>
				<listitem><para>typedef unsigned int wint_t;</para></listitem>

				<listitem><para>typedef signed char int8_t;</para></listitem>
				<listitem><para>typedef short int16_t;</para></listitem>
				<listitem CONDITION="ATR-LINUX"><para>typedef int int32_t;</para></listitem>
				<listitem CONDITION="ATR-EABI"><para>typedef long int32_t;</para></listitem>
				<listitem><para>typedef long long int64_t;</para></listitem>
				<listitem><para>typedef unsigned char uint8_t;</para></listitem>
				<listitem><para>typedef unsigned short uint16_t;</para></listitem>
				<listitem CONDITION="ATR-LINUX"><para>typedef unsigned int uint32_t;</para></listitem>
				<listitem CONDITION="ATR-EABI"><para>typedef unsigned long uint32_t;</para></listitem>
				<listitem><para>typedef unsigned long long uint64_t;</para></listitem>
				<listitem><para>typedef signed char int_least8_t;</para></listitem>
				<listitem><para>typedef short int_least16_t;</para></listitem>
				<listitem CONDITION="ATR-LINUX"><para>typedef int int_least32_t;</para></listitem>
				<listitem CONDITION="ATR-EABI"><para>typedef long int_least32_t;</para></listitem>
				<listitem><para>typedef long long int_least64_t;</para></listitem>
				<listitem><para>typedef unsigned char uint_least8_t;</para></listitem>
				<listitem><para>typedef unsigned short uint_least16_t;</para></listitem>
				<listitem CONDITION="ATR-LINUX"><para>typedef unsigned int uint_least32_t;</para></listitem>
				<listitem CONDITION="ATR-EABI"><para>typedef unsigned long uint_least32_t;</para></listitem>
				<listitem><para>typedef unsigned long long uint_least64_t;</para></listitem>
				<listitem CONDITION="ATR-LINUX"><para>typedef signed char int_fast8_t;</para></listitem>
				<listitem CONDITION="ATR-EABI"><para>typedef int int_fast8_t;</para></listitem>
				<listitem><para>typedef int int_fast16_t;</para></listitem>
				<listitem><para>typedef int int_fast32_t;</para></listitem>
				<listitem><para>typedef long long int_fast64_t;</para></listitem>
				<listitem CONDITION="ATR-LINUX"><para>typedef unsigned char uint_fast8_t;</para></listitem>
				<listitem CONDITION="ATR-EABI"><para>typedef unsigned int uint_fast8_t;</para></listitem>
				<listitem><para>typedef unsigned int uint_fast16_t;</para></listitem>
				<listitem><para>typedef unsigned int uint_fast32_t;</para></listitem>
				<listitem><para>typedef unsigned long long uint_fast64_t;</para></listitem>
				<listitem><para>typedef int intptr_t;</para></listitem>
				<listitem><para>typedef unsigned int uintptr_t;</para></listitem>
				<listitem><para>typedef long long intmax_t;</para></listitem>
				<listitem><para>typedef unsigned long long uintmax_t;</para></listitem>
			</itemizedlist>
		</sect2>

	</sect1>
</chapter>
<!-- Keep this comment at the end of the file Local Variables: mode: sgml sgml-parent-document: ("PPC-elf32abi.sgml" "book" "chapter") End: -->
